openapi: "3.0.2"
info:
  title: Transfer Registration Service
  version: "1.0"
servers:
  - url: https://api.server.test/v1
tags:
  - name: Transfer Registration Health Check
    description: The API enables a client to check if the Transfer Registration service is healthy.
  - name: Transfer Registration API
    description: The API endpoints enables a client to link or unlink a Person to a Vehicle.
paths:
  /transfer-registration-monitoring/health:
    get:
      tags:
        - Transfer Registration Health Check
      summary: The API enables a client to check if the Transfer Registration service is healthy.
      operationId: healthUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
        500:
          description: Internal Server Error
          content: {}
      deprecated: false
  /transfer-registration/v1/searchPerson:
    post:
      tags:
        - Transfer Registration API
      summary: Retrieve an unique Person corresponding to the emailId and optional mobile number
      operationId: retrievePerson
      requestBody:
        description: searchPersonRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPersonRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        400:
          description: This error occurs when there is a validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        408:
          description: This error occurs when request times out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        500:
          description: Internal Server Error has occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        501:
          description: Not implemented - Specified resource is not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        503:
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        401:
          description: Authentication Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
      deprecated: false
      security:
        - basicAuth: [ ]
  /transfer-registration/v1/searchVehicle:
    get:
      tags:
        - Transfer Registration API
      summary: Retrieve an unique Vehicle corresponding registration Number
      operationId: retrieveVehicle
      parameters:
        - name: registrationNumber
          in: query
          description: Unique identifier of the vehicle
          schema:
            type: string
            pattern: "([0-9]+[a-zA-Z][0-9a-zA-Z]*)|([a-zA-Z]+[0-9][0-9a-zA-Z]*)"
            example: "SDF78A"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        400:
          description: This error occurs when there is a validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        408:
          description: This error occurs when request times out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        500:
          description: Internal Server Error has occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        501:
          description: Not implemented - Specified resource is not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        503:
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
        401:
          description: Authentication Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRegistrationApiError'
      deprecated: false
      security:
        - basicAuth: [ ]
  /transfer-registration/v1/person:
    post:
      tags:
        - Transfer Registration API
      summary: createPerson
      operationId: createPerson
      requestBody:
        description: createPersonRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        400:
          description: Bad Request
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal Server Error
          content: { }
      deprecated: false
      security:
        - basicAuth: [ ]
  /transfer-registration/v1/vehicle:
    post:
      tags:
        - Transfer Registration API
      summary: createVehicle
      operationId: createVehicle
      requestBody:
        description: createVehicleRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleDetails'
        required: true
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDetails'
        400:
          description: Bad Request
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal Server Error
          content: { }
      deprecated: false
      security:
        - basicAuth: [ ]
  /transfer-registration/v1/linkPerson:
    put:
      tags:
        - Transfer Registration API
      summary: linkPerson
      operationId: linkPerson
      parameters:
        - name: registrationNumber
          in: path
          description: Unique identifier of vehicle
          required: true
          schema:
            type: string
            pattern: "([0-9]+[a-zA-Z][0-9a-zA-Z]*)|([a-zA-Z]+[0-9][0-9a-zA-Z]*)"
            example: "SDF78A"
      requestBody:
        description: linkPersonRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerDetails'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        400:
          description: Bad Request
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal Server Error
          content: { }
      deprecated: false
      security:
        - basicAuth: [ ]
  /transfer-registration/v1/unlinkPerson:
    put:
      tags:
        - Transfer Registration API
      summary: unlinkPerson
      operationId: unlinkPerson
      parameters:
        - name: registrationNumber
          in: path
          description: Unique identifier of vehicle
          required: true
          schema:
            type: string
            pattern: "([0-9]+[a-zA-Z][0-9a-zA-Z]*)|([a-zA-Z]+[0-9][0-9a-zA-Z]*)"
            example: "SDF78A"
      requestBody:
        description: unlinkPersonRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerDetails'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        400:
          description: Bad Request
          content: { }
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal Server Error
          content: { }
      deprecated: false
      security:
        - basicAuth: [ ]
components:
  schemas:
    TransferRegistrationApiError:
      title: TransferRegistrationApiError
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        debugMessage:
          type: string
    ServiceStatus:
      title: ServiceStatus
      type: object
      properties:
        status:
          type: string
    Person:
      title: Person
      type: object
      required:
        - emailId
        - password
      properties:
        emailId:
          type: string
          pattern: "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$"
          example: "test@gmail.com"
          description: Email address of the account holder.This will be used to login into the account created
        mobileNumber:
          type: string
          pattern: "^04[0-9]{8}$"
          example: "0462098765"
          description: Australian Mobile Number
        password:
          type: string
          format: password
    Vehicle:
      title: Vehicle
      type: object
      required:
        - vehicleDetails
        - ownerDetails
      properties:
        vehicleDetails:
          $ref: '#/components/schemas/VehicleDetails'
        ownerDetails:
          $ref: '#/components/schemas/OwnerDetails'
    VehicleDetails:
      title: VehicleDetails
      type: object
      required:
        - registrationNumber
        - model
        - make
        - year
        - vin
      properties:
        registrationNumber:
          type: string
          pattern: "([0-9]+[a-zA-Z][0-9a-zA-Z]*)|([a-zA-Z]+[0-9][0-9a-zA-Z]*)"
          example: "SDF78A"
        model:
          type: string
          example: "Focus"
        make:
          type: string
          example: "Ford"
        year:
          type: integer
          pattern: '^\d{4}$'
          example: "2010"
        vin:
          type: string
          pattern: "([0-9]+[a-zA-Z][0-9a-zA-Z]*)|([a-zA-Z]+[0-9][0-9a-zA-Z]*)"
          minLength: 11
          maxLength: 17
    SearchPersonRequest:
      title: SearchPersonRequest
      type: object
      required:
        - emailId
      properties:
        emailId:
          type: string
          pattern: "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$"
          example: "test@gmail.com"
          description: Email address of the account holder.This will be used to login into the account created
        mobileNumber:
          type: string
          pattern: "^04[0-9]{8}$"
          example: "0462098765"
          description: Australian Mobile Number
    OwnerDetails:
      title: OwnerDetails
      type: object
      required:
        - firstName
        - lastName
        - dob
        - postCode
        - emailId
      properties:
        firstName:
          type: string
          example: "John"
          description: The first name of the vehicle owner
        lastName:
          type: string
          example: "Sameul"
          description: The lastname of the vehicle owner
        dob:
          type: string
          format: date
          description: The date of birth of the vehicle owner
        streetName:
          type: string
          description: The street Name without the street number and type.Please enter Sweet for 15 Sweet Street
        postCode:
          type: number
          minLength: 4
          maxLength: 4
          description: The postcode of the suburb where the owner is residing
        emailId:
          type: string
          pattern: "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$"
          example: "test@gmail.com"